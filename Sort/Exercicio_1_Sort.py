list_fruits = ['banana', 'uva', 'abacaxi', 'laranja']

def sort_list_fruits(word):
    '''Creates a key for sorting the list of fruits by the last letter of each fruit.'''
    pri_caracter = word[0]
    #get the ASCII value of the first character
    value_ascii = ord(pri_caracter)

    # Defines priorityy for lower case letters (a-z = ASCII 97-122)
    if 97 <= value_ascii <= 122:
        priority = 0
    else:
        priority = 1
    return (priority, pri_caracter)

#Buble sort algorithm
n = len(list_fruits) # This gets the number of the items in the list to control the loop 

for i in range(n):  # The outer loop runs n tomes to ensure every item gets a chance to  "buble" to its correct position

# The inner loop adjacents. The n- i -1 part optimizes the loop by no re-checking elements that have already been placed in theur final sorted postion at the  end o the list
    for j in range(0, n-i-1): 

        #this line compares the sorting keys of two adjacent items. If the key for the first item is greater than the key for a second, the condition is true and the items are considered to be in the wrong order.
        if sort_list_fruits(list_fruits[j]) > sort_list_fruits(list_fruits[j+1]):  
            
            #This is a direct swap. its clean i python to exchange the posiions of two elements in a single line of code.
            list_fruits[j], list_fruits[j+1] = list_fruits[j+1], list_fruits[j]

# Result
print(list_fruits)

'''
list_fruits = []: This line simply initializes the list of fruits to be sorted. 

def sort_list_fruits(word): This function is designed to generate a custom "sorting key" for each word. It accepts one argument, word.

pri_caracter = word[0]: This line extracts the first caracter of the word string and assigns it to the variable pri_caracter. [0] refers to the character at the first position.

valor_ascii = ord(pricaracter): the ord() function is a built-in function that returns the ASCII value of a caracter. This command converts the first caracter into the corresponding numerical value , wich is necessary for the priority logic

if 97 <= value_ascii <= 122: This conditional statment  that checks if the value_ascii falls within a specific range. The range from 97 to 122 corresponds to the ascii values for all lowercase letters. if the first caracter is a lower case letter, the condition is true.

priority = 0: If the first caracter is a lowercase letter, the priority is set to 0, indicating high priority for sorting purposes.

priority = 1: If the first caracter is not a lowercase letter, the priority is set to 1, indicating lower priority for sorting purposes.

return (priority, pri_caracter): This command makes the function return a tuple

Buble sort algorithm

n = len(list_fruits): This command gets the number of items in the list_fruits list. This number is stored in variavble n and is used to control the loops.

for i in range(n): This is the the outer loop. It ensures the intie list is iterated through n times. The porpouse is to guarantee that the largest unsroted item bubles up to its correct postion in each pass.

for j in range(0, n- i -1): This is the inner loop. It compares each pair of adjacent items in the list. The n - i -1 part is optimization . As the outer loop progresses, the last i elements of the list are already sorted, so theres no need to compare them again.

if sort_list_fruits(list_fruits[j]) > sort_list_fruits(list_fruits[j+1]): This is the compararison logic. instead of comparing the fruits names directly, it compares the custom keys generated byb sortlist_fruits function. If the key of the current item (j) is greater than the key of the next time (j+1), the items are in the wrong order and need to be swapped.

list_fruits[j], list_fruits[j+1] = list_fruits[j+1], list_fruits[j]: This line performs the swap. If the "if condtionis met, this command moves the item at index j+1 to index j and vice versa, effectively putting them in the correct order.

print(list_fruits): This is the result.
'''
